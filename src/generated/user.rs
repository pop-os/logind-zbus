//! # DBus interface proxy for: `org.freedesktop.login1.User`
//!
//! This code was generated by `zbus-xmlgen` `1.0.0` from DBus introspection data.
//! Source: `Interface '/org/freedesktop/login1/user/_1000' from service 'org.freedesktop.login1' on system bus`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the
//! [Writing a client proxy](https://dbus.pages.freedesktop.org/zbus/client.html)
//! section of the zbus documentation.
//!
//! This DBus object implements
//! [standard DBus interfaces](https://dbus.freedesktop.org/doc/dbus-specification.html),
//! (`org.freedesktop.DBus.*`) for which the following zbus proxies can be used:
//!
//! * [`zbus::fdo::PeerProxy`]
//! * [`zbus::fdo::IntrospectableProxy`]
//! * [`zbus::fdo::PropertiesProxy`]
//!
//! â€¦consequently `zbus-xmlgen` did not generate code for the above interfaces.

use zbus::dbus_proxy;

use crate::types::DbusPath;

#[dbus_proxy(interface = "org.freedesktop.login1.User", default_service = "org.freedesktop.login1",)]
trait User {
    /// Kill method
    fn kill(&self, signal_number: i32) -> zbus::Result<()>;

    /// Terminate method
    fn terminate(&self) -> zbus::Result<()>;

    /// Display property
    #[dbus_proxy(property)]
    fn display(&self) -> zbus::Result<DbusPath>;

    /// GID property
    #[dbus_proxy(property)]
    fn gid(&self) -> zbus::Result<u32>;

    /// IdleHint property
    #[dbus_proxy(property)]
    fn idle_hint(&self) -> zbus::Result<bool>;

    /// IdleSinceHint property
    #[dbus_proxy(property)]
    fn idle_since_hint(&self) -> zbus::Result<u64>;

    /// IdleSinceHintMonotonic property
    #[dbus_proxy(property)]
    fn idle_since_hint_monotonic(&self) -> zbus::Result<u64>;

    /// Linger property
    #[dbus_proxy(property)]
    fn linger(&self) -> zbus::Result<bool>;

    /// Name property
    #[dbus_proxy(property)]
    fn name(&self) -> zbus::Result<String>;

    /// RuntimePath property
    #[dbus_proxy(property)]
    fn runtime_path(&self) -> zbus::Result<String>;

    /// Service property
    #[dbus_proxy(property)]
    fn service(&self) -> zbus::Result<String>;

    // /// Sessions property
    // #[dbus_proxy(property)]
    // fn sessions(&self) -> zbus::Result<Vec<DbusPath>>;

    /// Slice property
    #[dbus_proxy(property)]
    fn slice(&self) -> zbus::Result<String>;

    /// State property
    #[dbus_proxy(property)]
    fn state(&self) -> zbus::Result<String>;

    /// Timestamp property
    #[dbus_proxy(property)]
    fn timestamp(&self) -> zbus::Result<u64>;

    /// TimestampMonotonic property
    #[dbus_proxy(property)]
    fn timestamp_monotonic(&self) -> zbus::Result<u64>;

    /// UID property
    #[dbus_proxy(property)]
    fn uid(&self) -> zbus::Result<u32>;
}
